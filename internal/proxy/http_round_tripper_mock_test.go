package proxy

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

import (
	mm_http "net/http"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RoundTripperMock implements http.RoundTripper
type RoundTripperMock struct {
	t minimock.Tester

	funcRoundTrip          func(rp1 *mm_http.Request) (rp2 *mm_http.Response, err error)
	inspectFuncRoundTrip   func(rp1 *mm_http.Request)
	afterRoundTripCounter  uint64
	beforeRoundTripCounter uint64
	RoundTripMock          mRoundTripperMockRoundTrip
}

// NewRoundTripperMock returns a mock for http.RoundTripper
func NewRoundTripperMock(t minimock.Tester) *RoundTripperMock {
	m := &RoundTripperMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RoundTripMock = mRoundTripperMockRoundTrip{mock: m}
	m.RoundTripMock.callArgs = []*RoundTripperMockRoundTripParams{}

	return m
}

type mRoundTripperMockRoundTrip struct {
	mock               *RoundTripperMock
	defaultExpectation *RoundTripperMockRoundTripExpectation
	expectations       []*RoundTripperMockRoundTripExpectation

	callArgs []*RoundTripperMockRoundTripParams
	mutex    sync.RWMutex
}

// RoundTripperMockRoundTripExpectation specifies expectation struct of the RoundTripper.RoundTrip
type RoundTripperMockRoundTripExpectation struct {
	mock    *RoundTripperMock
	params  *RoundTripperMockRoundTripParams
	results *RoundTripperMockRoundTripResults
	Counter uint64
}

// RoundTripperMockRoundTripParams contains parameters of the RoundTripper.RoundTrip
type RoundTripperMockRoundTripParams struct {
	rp1 *mm_http.Request
}

// RoundTripperMockRoundTripResults contains results of the RoundTripper.RoundTrip
type RoundTripperMockRoundTripResults struct {
	rp2 *mm_http.Response
	err error
}

// Expect sets up expected params for RoundTripper.RoundTrip
func (mmRoundTrip *mRoundTripperMockRoundTrip) Expect(rp1 *mm_http.Request) *mRoundTripperMockRoundTrip {
	if mmRoundTrip.mock.funcRoundTrip != nil {
		mmRoundTrip.mock.t.Fatalf("RoundTripperMock.RoundTrip mock is already set by Set")
	}

	if mmRoundTrip.defaultExpectation == nil {
		mmRoundTrip.defaultExpectation = &RoundTripperMockRoundTripExpectation{}
	}

	mmRoundTrip.defaultExpectation.params = &RoundTripperMockRoundTripParams{rp1}
	for _, e := range mmRoundTrip.expectations {
		if minimock.Equal(e.params, mmRoundTrip.defaultExpectation.params) {
			mmRoundTrip.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRoundTrip.defaultExpectation.params)
		}
	}

	return mmRoundTrip
}

// Inspect accepts an inspector function that has same arguments as the RoundTripper.RoundTrip
func (mmRoundTrip *mRoundTripperMockRoundTrip) Inspect(f func(rp1 *mm_http.Request)) *mRoundTripperMockRoundTrip {
	if mmRoundTrip.mock.inspectFuncRoundTrip != nil {
		mmRoundTrip.mock.t.Fatalf("Inspect function is already set for RoundTripperMock.RoundTrip")
	}

	mmRoundTrip.mock.inspectFuncRoundTrip = f

	return mmRoundTrip
}

// Return sets up results that will be returned by RoundTripper.RoundTrip
func (mmRoundTrip *mRoundTripperMockRoundTrip) Return(rp2 *mm_http.Response, err error) *RoundTripperMock {
	if mmRoundTrip.mock.funcRoundTrip != nil {
		mmRoundTrip.mock.t.Fatalf("RoundTripperMock.RoundTrip mock is already set by Set")
	}

	if mmRoundTrip.defaultExpectation == nil {
		mmRoundTrip.defaultExpectation = &RoundTripperMockRoundTripExpectation{mock: mmRoundTrip.mock}
	}
	mmRoundTrip.defaultExpectation.results = &RoundTripperMockRoundTripResults{rp2, err}
	return mmRoundTrip.mock
}

//Set uses given function f to mock the RoundTripper.RoundTrip method
func (mmRoundTrip *mRoundTripperMockRoundTrip) Set(f func(rp1 *mm_http.Request) (rp2 *mm_http.Response, err error)) *RoundTripperMock {
	if mmRoundTrip.defaultExpectation != nil {
		mmRoundTrip.mock.t.Fatalf("Default expectation is already set for the RoundTripper.RoundTrip method")
	}

	if len(mmRoundTrip.expectations) > 0 {
		mmRoundTrip.mock.t.Fatalf("Some expectations are already set for the RoundTripper.RoundTrip method")
	}

	mmRoundTrip.mock.funcRoundTrip = f
	return mmRoundTrip.mock
}

// When sets expectation for the RoundTripper.RoundTrip which will trigger the result defined by the following
// Then helper
func (mmRoundTrip *mRoundTripperMockRoundTrip) When(rp1 *mm_http.Request) *RoundTripperMockRoundTripExpectation {
	if mmRoundTrip.mock.funcRoundTrip != nil {
		mmRoundTrip.mock.t.Fatalf("RoundTripperMock.RoundTrip mock is already set by Set")
	}

	expectation := &RoundTripperMockRoundTripExpectation{
		mock:   mmRoundTrip.mock,
		params: &RoundTripperMockRoundTripParams{rp1},
	}
	mmRoundTrip.expectations = append(mmRoundTrip.expectations, expectation)
	return expectation
}

// Then sets up RoundTripper.RoundTrip return parameters for the expectation previously defined by the When method
func (e *RoundTripperMockRoundTripExpectation) Then(rp2 *mm_http.Response, err error) *RoundTripperMock {
	e.results = &RoundTripperMockRoundTripResults{rp2, err}
	return e.mock
}

// RoundTrip implements http.RoundTripper
func (mmRoundTrip *RoundTripperMock) RoundTrip(rp1 *mm_http.Request) (rp2 *mm_http.Response, err error) {
	mm_atomic.AddUint64(&mmRoundTrip.beforeRoundTripCounter, 1)
	defer mm_atomic.AddUint64(&mmRoundTrip.afterRoundTripCounter, 1)

	if mmRoundTrip.inspectFuncRoundTrip != nil {
		mmRoundTrip.inspectFuncRoundTrip(rp1)
	}

	mm_params := &RoundTripperMockRoundTripParams{rp1}

	// Record call args
	mmRoundTrip.RoundTripMock.mutex.Lock()
	mmRoundTrip.RoundTripMock.callArgs = append(mmRoundTrip.RoundTripMock.callArgs, mm_params)
	mmRoundTrip.RoundTripMock.mutex.Unlock()

	for _, e := range mmRoundTrip.RoundTripMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp2, e.results.err
		}
	}

	if mmRoundTrip.RoundTripMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRoundTrip.RoundTripMock.defaultExpectation.Counter, 1)
		mm_want := mmRoundTrip.RoundTripMock.defaultExpectation.params
		mm_got := RoundTripperMockRoundTripParams{rp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRoundTrip.t.Errorf("RoundTripperMock.RoundTrip got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRoundTrip.RoundTripMock.defaultExpectation.results
		if mm_results == nil {
			mmRoundTrip.t.Fatal("No results are set for the RoundTripperMock.RoundTrip")
		}
		return (*mm_results).rp2, (*mm_results).err
	}
	if mmRoundTrip.funcRoundTrip != nil {
		return mmRoundTrip.funcRoundTrip(rp1)
	}
	mmRoundTrip.t.Fatalf("Unexpected call to RoundTripperMock.RoundTrip. %v", rp1)
	return
}

// RoundTripAfterCounter returns a count of finished RoundTripperMock.RoundTrip invocations
func (mmRoundTrip *RoundTripperMock) RoundTripAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRoundTrip.afterRoundTripCounter)
}

// RoundTripBeforeCounter returns a count of RoundTripperMock.RoundTrip invocations
func (mmRoundTrip *RoundTripperMock) RoundTripBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRoundTrip.beforeRoundTripCounter)
}

// Calls returns a list of arguments used in each call to RoundTripperMock.RoundTrip.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRoundTrip *mRoundTripperMockRoundTrip) Calls() []*RoundTripperMockRoundTripParams {
	mmRoundTrip.mutex.RLock()

	argCopy := make([]*RoundTripperMockRoundTripParams, len(mmRoundTrip.callArgs))
	copy(argCopy, mmRoundTrip.callArgs)

	mmRoundTrip.mutex.RUnlock()

	return argCopy
}

// MinimockRoundTripDone returns true if the count of the RoundTrip invocations corresponds
// the number of defined expectations
func (m *RoundTripperMock) MinimockRoundTripDone() bool {
	for _, e := range m.RoundTripMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RoundTripMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRoundTripCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRoundTrip != nil && mm_atomic.LoadUint64(&m.afterRoundTripCounter) < 1 {
		return false
	}
	return true
}

// MinimockRoundTripInspect logs each unmet expectation
func (m *RoundTripperMock) MinimockRoundTripInspect() {
	for _, e := range m.RoundTripMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RoundTripperMock.RoundTrip with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RoundTripMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRoundTripCounter) < 1 {
		if m.RoundTripMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RoundTripperMock.RoundTrip")
		} else {
			m.t.Errorf("Expected call to RoundTripperMock.RoundTrip with params: %#v", *m.RoundTripMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRoundTrip != nil && mm_atomic.LoadUint64(&m.afterRoundTripCounter) < 1 {
		m.t.Error("Expected call to RoundTripperMock.RoundTrip")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RoundTripperMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRoundTripInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RoundTripperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RoundTripperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRoundTripDone()
}
