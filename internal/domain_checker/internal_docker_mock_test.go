package domain_checker

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/rekby/lets-proxy2/internal/domain"

	"github.com/gojuno/minimock/v3"
	"github.com/rekby/lets-proxy2/internal/docker"
)

// InternalDockerMock implements internalDocker
type InternalDockerMock struct {
	t minimock.Tester

	funcGetTarget          func(ctx context.Context, domain domain.DomainName) (dp1 *docker.DomainInfo, err error)
	inspectFuncGetTarget   func(ctx context.Context, domain domain.DomainName)
	afterGetTargetCounter  uint64
	beforeGetTargetCounter uint64
	GetTargetMock          mInternalDockerMockGetTarget
}

// NewInternalDockerMock returns a mock for internalDocker
func NewInternalDockerMock(t minimock.Tester) *InternalDockerMock {
	m := &InternalDockerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetTargetMock = mInternalDockerMockGetTarget{mock: m}
	m.GetTargetMock.callArgs = []*InternalDockerMockGetTargetParams{}

	return m
}

type mInternalDockerMockGetTarget struct {
	mock               *InternalDockerMock
	defaultExpectation *InternalDockerMockGetTargetExpectation
	expectations       []*InternalDockerMockGetTargetExpectation

	callArgs []*InternalDockerMockGetTargetParams
	mutex    sync.RWMutex
}

// InternalDockerMockGetTargetExpectation specifies expectation struct of the internalDocker.GetTarget
type InternalDockerMockGetTargetExpectation struct {
	mock    *InternalDockerMock
	params  *InternalDockerMockGetTargetParams
	results *InternalDockerMockGetTargetResults
	Counter uint64
}

// InternalDockerMockGetTargetParams contains parameters of the internalDocker.GetTarget
type InternalDockerMockGetTargetParams struct {
	ctx    context.Context
	domain domain.DomainName
}

// InternalDockerMockGetTargetResults contains results of the internalDocker.GetTarget
type InternalDockerMockGetTargetResults struct {
	dp1 *docker.DomainInfo
	err error
}

// Expect sets up expected params for internalDocker.GetTarget
func (mmGetTarget *mInternalDockerMockGetTarget) Expect(ctx context.Context, domain domain.DomainName) *mInternalDockerMockGetTarget {
	if mmGetTarget.mock.funcGetTarget != nil {
		mmGetTarget.mock.t.Fatalf("InternalDockerMock.GetTarget mock is already set by Set")
	}

	if mmGetTarget.defaultExpectation == nil {
		mmGetTarget.defaultExpectation = &InternalDockerMockGetTargetExpectation{}
	}

	mmGetTarget.defaultExpectation.params = &InternalDockerMockGetTargetParams{ctx, domain}
	for _, e := range mmGetTarget.expectations {
		if minimock.Equal(e.params, mmGetTarget.defaultExpectation.params) {
			mmGetTarget.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTarget.defaultExpectation.params)
		}
	}

	return mmGetTarget
}

// Inspect accepts an inspector function that has same arguments as the internalDocker.GetTarget
func (mmGetTarget *mInternalDockerMockGetTarget) Inspect(f func(ctx context.Context, domain domain.DomainName)) *mInternalDockerMockGetTarget {
	if mmGetTarget.mock.inspectFuncGetTarget != nil {
		mmGetTarget.mock.t.Fatalf("Inspect function is already set for InternalDockerMock.GetTarget")
	}

	mmGetTarget.mock.inspectFuncGetTarget = f

	return mmGetTarget
}

// Return sets up results that will be returned by internalDocker.GetTarget
func (mmGetTarget *mInternalDockerMockGetTarget) Return(dp1 *docker.DomainInfo, err error) *InternalDockerMock {
	if mmGetTarget.mock.funcGetTarget != nil {
		mmGetTarget.mock.t.Fatalf("InternalDockerMock.GetTarget mock is already set by Set")
	}

	if mmGetTarget.defaultExpectation == nil {
		mmGetTarget.defaultExpectation = &InternalDockerMockGetTargetExpectation{mock: mmGetTarget.mock}
	}
	mmGetTarget.defaultExpectation.results = &InternalDockerMockGetTargetResults{dp1, err}
	return mmGetTarget.mock
}

//Set uses given function f to mock the internalDocker.GetTarget method
func (mmGetTarget *mInternalDockerMockGetTarget) Set(f func(ctx context.Context, domain domain.DomainName) (dp1 *docker.DomainInfo, err error)) *InternalDockerMock {
	if mmGetTarget.defaultExpectation != nil {
		mmGetTarget.mock.t.Fatalf("Default expectation is already set for the internalDocker.GetTarget method")
	}

	if len(mmGetTarget.expectations) > 0 {
		mmGetTarget.mock.t.Fatalf("Some expectations are already set for the internalDocker.GetTarget method")
	}

	mmGetTarget.mock.funcGetTarget = f
	return mmGetTarget.mock
}

// When sets expectation for the internalDocker.GetTarget which will trigger the result defined by the following
// Then helper
func (mmGetTarget *mInternalDockerMockGetTarget) When(ctx context.Context, domain domain.DomainName) *InternalDockerMockGetTargetExpectation {
	if mmGetTarget.mock.funcGetTarget != nil {
		mmGetTarget.mock.t.Fatalf("InternalDockerMock.GetTarget mock is already set by Set")
	}

	expectation := &InternalDockerMockGetTargetExpectation{
		mock:   mmGetTarget.mock,
		params: &InternalDockerMockGetTargetParams{ctx, domain},
	}
	mmGetTarget.expectations = append(mmGetTarget.expectations, expectation)
	return expectation
}

// Then sets up internalDocker.GetTarget return parameters for the expectation previously defined by the When method
func (e *InternalDockerMockGetTargetExpectation) Then(dp1 *docker.DomainInfo, err error) *InternalDockerMock {
	e.results = &InternalDockerMockGetTargetResults{dp1, err}
	return e.mock
}

// GetTarget implements internalDocker
func (mmGetTarget *InternalDockerMock) GetTarget(ctx context.Context, domain domain.DomainName) (dp1 *docker.DomainInfo, err error) {
	mm_atomic.AddUint64(&mmGetTarget.beforeGetTargetCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTarget.afterGetTargetCounter, 1)

	if mmGetTarget.inspectFuncGetTarget != nil {
		mmGetTarget.inspectFuncGetTarget(ctx, domain)
	}

	mm_params := &InternalDockerMockGetTargetParams{ctx, domain}

	// Record call args
	mmGetTarget.GetTargetMock.mutex.Lock()
	mmGetTarget.GetTargetMock.callArgs = append(mmGetTarget.GetTargetMock.callArgs, mm_params)
	mmGetTarget.GetTargetMock.mutex.Unlock()

	for _, e := range mmGetTarget.GetTargetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp1, e.results.err
		}
	}

	if mmGetTarget.GetTargetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTarget.GetTargetMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTarget.GetTargetMock.defaultExpectation.params
		mm_got := InternalDockerMockGetTargetParams{ctx, domain}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTarget.t.Errorf("InternalDockerMock.GetTarget got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTarget.GetTargetMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTarget.t.Fatal("No results are set for the InternalDockerMock.GetTarget")
		}
		return (*mm_results).dp1, (*mm_results).err
	}
	if mmGetTarget.funcGetTarget != nil {
		return mmGetTarget.funcGetTarget(ctx, domain)
	}
	mmGetTarget.t.Fatalf("Unexpected call to InternalDockerMock.GetTarget. %v %v", ctx, domain)
	return
}

// GetTargetAfterCounter returns a count of finished InternalDockerMock.GetTarget invocations
func (mmGetTarget *InternalDockerMock) GetTargetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTarget.afterGetTargetCounter)
}

// GetTargetBeforeCounter returns a count of InternalDockerMock.GetTarget invocations
func (mmGetTarget *InternalDockerMock) GetTargetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTarget.beforeGetTargetCounter)
}

// Calls returns a list of arguments used in each call to InternalDockerMock.GetTarget.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTarget *mInternalDockerMockGetTarget) Calls() []*InternalDockerMockGetTargetParams {
	mmGetTarget.mutex.RLock()

	argCopy := make([]*InternalDockerMockGetTargetParams, len(mmGetTarget.callArgs))
	copy(argCopy, mmGetTarget.callArgs)

	mmGetTarget.mutex.RUnlock()

	return argCopy
}

// MinimockGetTargetDone returns true if the count of the GetTarget invocations corresponds
// the number of defined expectations
func (m *InternalDockerMock) MinimockGetTargetDone() bool {
	for _, e := range m.GetTargetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTargetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTargetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTarget != nil && mm_atomic.LoadUint64(&m.afterGetTargetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetTargetInspect logs each unmet expectation
func (m *InternalDockerMock) MinimockGetTargetInspect() {
	for _, e := range m.GetTargetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to InternalDockerMock.GetTarget with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTargetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTargetCounter) < 1 {
		if m.GetTargetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to InternalDockerMock.GetTarget")
		} else {
			m.t.Errorf("Expected call to InternalDockerMock.GetTarget with params: %#v", *m.GetTargetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTarget != nil && mm_atomic.LoadUint64(&m.afterGetTargetCounter) < 1 {
		m.t.Error("Expected call to InternalDockerMock.GetTarget")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *InternalDockerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetTargetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *InternalDockerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *InternalDockerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetTargetDone()
}
